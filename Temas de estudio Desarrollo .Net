-------------------------------------------------------------------------
POO object-oriented programming

Clase
es una especie de "plantilla" en la que se definen los atributos y métodos predeterminados 
de un tipo de objeto. 

Herencia (Herarquizar)
es el medio del cual una clase se deriva de otra de manera que extiende su funcionalidad.

Objeto
es una Instancia de una clase. 

Método
Algoritmo asociado a un objeto (o a una clase de objetos).

Evento
Es un suceso en el sistema como la creacion de un evento.

Atributos
Características que tiene la clase.

Abstracciones
Definir la estructura de una clase 
es la acción de aislar los componentes esenciales de un objeto de aquellos que no lo son.
Clase abstracta 
puede tener metodos concretos y metodos abstractos no se instancia como objeto.
interfaz 
define un contrato que una clase puede implementar solo define la firma de los metodos de la clase a implementar.

Encapsulamiento
el encapsulamiento es cuando se realiza un ocultamiento del estado.
Se colocan los elementos a un mismo nivel de abstraccion (private public)
Modificadores de acceso
public	Access is not restricted.
protected	Access is limited to the containing class or types derived from the containing class.
internal	Access is limited to the current assembly.
protected internal	Access is limited to the current assembly or types derived from the containing class.
private	Access is limited to the containing type.
private protected	Access is limited to the containing class or types derived from the containing class within the current assembly.

Polimorfismo
Una clase se pueda ser invocada por otra con distintos objetos.
hacer que una clase se comporte como otra. Vehiculo -- moto carro bicicleta heredan de vehiculo.
Polimorfismo en tiempo compilacion (sobrecarga de metodos) Cuando tengo metodos con el mismo llamado pero recibe diferentes atributos 
Polimorfismo en tiempo de ejecucion (Metoods virtuales ) Cuando tengo varias clases y se heredan de una sola y cada una requiere un metodo diferente entonces la sobre escribo con override para usar la de la clase y no la de la herencia. 

-------------------------------------------------------------------------

Standalone applications

Aplicaciones de escritorio, o monoliticas que no requieren conexion a red. 

-------------------------------------------------------------------------
Programacion Concurrent 

Hilos (Threads)  }
System.Threading Espacios de ejecucion independientes.
Thread thread = new Thread(DoWork);

Tareas (Tasks) y Programación Paralela:
System.Threading.Tasks Se utiliza para la programacion asincronica y paralela
palabras clave como async y await 

---------------------------------------------------------------------------
Multithreading Programming

Programacion multihilo es poner a ejecutar dos procesos en hilos independientes para que se ejecuten al mismo tiempo, 
Es importante la sincronizacion de hilos  y hay herramientas como lock, Monitor, Mutex o Semaphore 
lock es mas simple bloquea el hilo para usar elementos compartidos pero solo por el.
monitor ofrece funcionalidades adicionales como enter exit wait pulse permite bloquearlo manual
mutex puede sincronizar recursos compartidos entre múltiples procesos alcance mas amplio.
semaphore permite controlar el acceso por un numero de hilos, genera mayor flexibilidad. 

----------------------------------------------------------------------------
Microservicios 

Principios de Diseño para Microservicios:
	Desacoplamiento:
	Cada microservicio debe ser independiente y tener su propia lógica de negocio. Los servicios deben estar fuertemente desacoplados para que puedan evolucionar y escalarse de forma independiente.

	Límites de Contexto:
	Cada microservicio debe definir claramente su límite de contexto y ser responsable de una sola funcionalidad específica.

	Comunicación entre Microservicios:
	La comunicación entre microservicios puede realizarse a través de API RESTful, gRPC, mensajería asincrónica o eventos, según las necesidades del sistema.

	Monitorización y Tolerancia a Fallos:
	Es fundamental implementar técnicas de monitorización y manejo de errores en cada microservicio para garantizar la robustez del sistema.

WCF (Windows Communication Foundation)
Marco de trabajo para servicios web 
Con protocolos HTTP, TCP, Named Pipes. 
con diferentes formatos de mensaje como XML, JSON y binario

Códigos de Estado Comunes en HTTP:
1xx: Respuestas Informativas: Indican que la solicitud ha sido recibida y el servidor continúa procesándola.
2xx: Respuestas Exitosas: Indican que la solicitud fue recibida, entendida y aceptada exitosamente.
3xx: Redirecciones: Indican que el cliente necesita realizar más acciones para completar la solicitud.
4xx: Errores del Cliente: Indican errores causados por acciones del cliente.
5xx: Errores del Servidor: Indican que el servidor no pudo completar una solicitud válida.


ASP.NET
Se usaba como web.forms y mvc  en .Net framework 

ASP.NET Core 
Evolucion de asp.net, ya es multiplataforma 

ASP.NET MVC Modelo vista controlador
Es un marco de trabajo que implementa el patron de diseño MVC 
---------------------------------------------------------------------------
WEB API

Web API en .NET se refiere a la capacidad de crear servicios web HTTP RESTful 
Como los microservicios anteriores 


----------------------------------------------------------------------------