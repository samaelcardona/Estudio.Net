Programación Orientada a Objetos (POO)

	La Programación Orientada a Objetos (POO) es un paradigma que organiza el código en torno a "objetos", que son instancias de "clases". Estas son algunas definiciones y ejemplos adicionales:
	
	Clase: Es una plantilla que define atributos y métodos. Por ejemplo, una clase "Coche" podría tener atributos como "color" y "modelo", y métodos como "arrancar" y "detener".
	
		class Coche {
		  color: string;
		  modelo: string;
		
		  constructor(color: string, modelo: string) {
		    this.color = color;
		    this.modelo = modelo;
		  }
		
		  arrancar() {
		    console.log("El coche ha arrancado.");
		  }
		
		  detener() {
		    console.log("El coche se ha detenido.");
		  }
		}
		
		// Crear una instancia de la clase Coche
		const miCoche = new Coche("Rojo", "Sedán");
		miCoche.arrancar();
	
	Herencia: Permite que una clase herede atributos y métodos de otra. Por ejemplo, una clase "Camioneta" podría heredar de la clase "Coche".
	
		class Camioneta extends Coche {
		  carga: number;
		
		  constructor(color: string, modelo: string, carga: number) {
		    super(color, modelo);
		    this.carga = carga;
		  }
		}
		
		// Crear una instancia de la clase Camioneta
		const miCamioneta = new Camioneta("Azul", "Pickup", 500);
		miCamioneta.arrancar();
	
	Abstracciones: Definir la estructura de una clase es aislar los componentes esenciales. Por ejemplo, una clase "Figura" podría tener métodos como "calcularÁrea", sin preocuparse de si es un cuadrado o un círculo.
	
	
	Programación Concurrente y Multihilo
	
	Hilos (Threads): Los hilos son espacios de ejecución independientes. En un ejemplo, podríamos tener un hilo para descargar datos y otro para mostrar una interfaz de usuario.
	
		using System.Threading;
		
		void DescargarDatos() {
		  // Código para descargar datos
		}
		
		Thread hiloDescarga = new Thread(DescargarDatos);
		hiloDescarga.Start();
	
	Programación Paralela: Con tareas, podemos realizar operaciones concurrentes y paralelas. En un ejemplo, podríamos realizar varias operaciones al mismo tiempo.
	
		using System;
		using System.Threading.Tasks;
		
		async Task RealizarOperaciones() {
		  Task operacion1 = OperacionAsincronica();
		  Task operacion2 = OperacionAsincronica();
		
		  await Task.WhenAll(operacion1, operacion2);
		  Console.WriteLine("Operaciones completadas");
		}
	
	Programación Multihilo: Implica ejecutar procesos en hilos independientes. Un ejemplo podría ser una aplicación que realiza 	cálculos intensivos en un hilo mientras responde a eventos de usuario en otro.
	
		using System;
		using System.Threading;
		
		void HiloCalculos() {
		  // Cálculos intensivos
		}
		
		void HiloInterfazUsuario() {
		  // Interacción con el usuario
		}
		
		Thread hiloCalculos = new Thread(HiloCalculos);
		Thread hiloInterfazUsuario = new Thread(HiloInterfazUsuario);
		
		hiloCalculos.Start();
		hiloInterfazUsuario.Start();

Microservicios

	Desacoplamiento: Cada microservicio es independiente. Por ejemplo, un servicio de autenticación no necesita conocer los detalles internos de un servicio de pago.
	
	Límites de Contexto: Cada microservicio se centra en una funcionalidad específica. Un servicio de correo electrónico se encarga solo del envío de correos.
	
	Comunicación entre Microservicios: Puede realizarse mediante API RESTful. Un servicio puede exponer endpoints para que otros servicios puedan consumir sus funciones.
	
	Monitorización y Tolerancia a Fallos: Cada microservicio debe ser monitorizado para asegurar su funcionamiento. Se implementan manejadores de errores para garantizar la robustez del sistema.

WCF (Windows Communication Foundation)

	WCF es un marco de trabajo para servicios web que permite la comunicación entre aplicaciones. Por ejemplo, podríamos tener un servicio que recibe y procesa pedidos en un sistema de comercio electrónico.

ASP.NET y ASP.NET Core

	ASP.NET: Utilizado como web.forms y MVC en .NET Framework.
	
	ASP.NET Core: Es una evolución de ASP.NET y es multiplataforma.
	
	ASP.NET MVC (Modelo Vista Controlador)
	
		Es un marco de trabajo que organiza la aplicación en tres componentes: el Modelo (datos y lógica), la Vista (interfaz de usuario) y el Controlador (maneja las interacciones entre Modelo y Vista).
	
	Web API en .NET
	
		Web API en .NET: Permite crear servicios web HTTP RESTful. Un ejemplo podría ser un servicio que devuelve datos de productos en formato JSON.
		[Route("api/productos")]
		public class ProductosController : ControllerBase {
		  [HttpGet]
		  public IActionResult ObtenerProductos() {
		    // Lógica para obtener y devolver productos
		    return Ok(productos);
		  }
		}
